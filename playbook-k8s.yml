---

- hosts: all
  any_errors_fatal: true

  tasks:
    - name: update hosts file
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].ansible_eth1.ipv4.address }} {{ item }}"
        regexp: '.*{{ item }}$'
      loop: "{{ groups.all }}"

    - name: update host name
      hostname:
        name: "{{ inventory_hostname }}"

    - name: disable swap fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      loop:
        - /swap.img

- hosts: control[0]
  any_errors_fatal: true
  tasks:
    - name: initialize the cluster
      command: 'kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_eth1.ipv4.address }}'
      args:
        creates: /root/cluster_initialized.txt
      register: kubeadm_init_raw

    - name: save kubeadm init output to a file
      copy:
        content: "stdout:\n{{ kubeadm_init_raw.stdout }}\n\nstderr:\n{{ kubeadm_init_raw.stderr }}"
        dest: /root/cluster_initialized.txt
      when: kubeadm_init_raw.changed

    - name: copy auth, install cni, ingress
      ansible.builtin.shell: |
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        #kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/tigera-operator.yaml
        #kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/custom-resources.yaml
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/cloud/deploy.yaml
      args:
        creates: /root/k8s_cni_initialized.txt
      register: k8s_cni_init_raw

    - name: save cni init output to a file
      copy:
        content: "stdout:\n{{ k8s_cni_init_raw.stdout }}\n\nstderr:\n{{ k8s_cni_init_raw.stderr }}"
        dest: /root/k8s_cni_initialized.txt
      when: k8s_cni_init_raw.changed

    - name: get join command
      command: kubeadm token create --print-join-command
      register: join_command_raw
      changed_when: no

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

- hosts: worker
  any_errors_fatal: true
  vars:
    join_command: "{{ hostvars['vagrant-control-01'].join_command }}"
  tasks:
    - name: join cluster
      command: "{{ join_command }}"
      args:
        creates: /root/node_joined.txt
      register: kubeadm_join_raw

    - name: save kubeadm join output to a file
      copy:
        content: "stdout:\n{{ kubeadm_join_raw.stdout }}\n\nstderr:\n{{ kubeadm_join_raw.stderr }}"
        dest: /root/node_joined.txt
      when: kubeadm_join_raw.changed


- hosts: all
  any_errors_fatal: true
  tasks:
    - name: kubelet service
      service:
        name: kubelet
        enabled: yes
        state: started
